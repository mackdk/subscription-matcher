package com.suse.matcher.rules.drools;

import java.util.TreeMap;
import com.suse.matcher.facts.HostGuest;
import com.suse.matcher.facts.Message;
import com.suse.matcher.facts.Product;
import com.suse.matcher.facts.Subscription;
import com.suse.matcher.facts.System;
import com.suse.matcher.facts.InstalledProduct;
import com.suse.matcher.facts.Timestamp;
import com.suse.matcher.facts.VirtualizationGroupMember;

import function com.suse.matcher.DeductionPhaseLogger.info;
import function com.suse.matcher.DeductionPhaseLogger.warn;

rule "ignoreExpiredSubscription"
    agenda-group "InputValidation"
    when
        Timestamp($timestamp : timestamp)
        $subscription: Subscription((endDate != null && endDate < $timestamp) || (startDate != null && startDate > $timestamp))
    then
        info(kcontext, "Ignoring subscription {} - Expired", $subscription.partNumber);
        modify($subscription) {
            ignored = true;
        }
end

rule "ignoreNotActiveSubscriptions"
    agenda-group "InputValidation"
    when
        $subscription : Subscription(startDate == null) or
        $subscription : Subscription(endDate == null)
    then
        info(kcontext, "Ignoring subscription {} - Not active", $subscription.partNumber);
        modify($subscription) {
            ignored = true;
        }
end

rule "ignoreServiceSubscriptionsWithoutProducts"
    agenda-group "InputValidation"
    when
        $subscription : Subscription(policy == null)
        accumulate(
            $product : SubscriptionProduct(subscriptionId == $subscription.id);
            $count : count();
            $count == 0
        )
    then
        info(kcontext, "Ignoring subscription {} - Service subscription (no products)", $subscription.partNumber);
        // Create a message if it's not a known service subscription
        if (!$subscription.partNumber.startsWith("051-")) {
            TreeMap<String, String> msgData = new TreeMap<>();
            msgData.put("part_number", String.valueOf($subscription.partNumber));
            insert(new Message(Message.Level.INFO, "no_products_associated", msgData));
        }
        modify($subscription) {
            ignored = true;
        }
end

rule "ignoreSubscriptionWithoutQuantity"
    agenda-group "InputValidation"
    when
        $subscription: Subscription(quantity == null)
    then
        info(kcontext, "Ignoring subscription {} - Undefined quantity", $subscription.partNumber);
        modify($subscription) {
            ignored = true;
        }
end

rule "retractBlacklistedProduct"
    agenda-group "InputValidation"
    when
        // novell-open-enterprise-server-i386 9
        $installedProduct : InstalledProduct(productId == 955) or
        // novell-open-enterprise-server-x86_64 9
        $installedProduct : InstalledProduct(productId == 957) or
        // open_enterprise_server 11
        $installedProduct : InstalledProduct(productId == 1232) or
        // open_enterprise_server 11.1
        $installedProduct : InstalledProduct(productId == 1241) or
        // open_enterprise_server 11.2
        $installedProduct : InstalledProduct(productId == 1242)
    then
        info(kcontext, "Ignoring installed product {} - Blacklisted", $installedProduct);
        retract($installedProduct);
end

rule "retractFreeProduct"
    agenda-group "InputValidation"
    when
        Product($productId : id, free == true)
        $installedProduct : InstalledProduct(productId == $productId)
    then
        info(kcontext, "Ignoring installed product {} - Free", $installedProduct);
        retract($installedProduct);
end

rule "logUnknownPartNumber"
    agenda-group "InputValidation"
    when
        $subscription: Subscription(policy == null, partNumber != null, ignored == false)
    then
        TreeMap<String, String> data = new TreeMap<>();
        data.put("part_number", $subscription.partNumber);
        insert(new Message(Message.Level.DEBUG, "unknown_part_number", data));
        warn(kcontext, "Unknown subscription part number {}", $subscription.partNumber);
end

rule "logPhysicalGuest"
    agenda-group "InputValidation"
    when
        HostGuest($guestId : guestId)
        $guest : System(id == $guestId, physical == true)
    then
        // input data says this guest is physical machine, this is not expected
        // log and autocorrect
        TreeMap<String, String> data = new TreeMap<>();
        data.put("id", String.valueOf($guestId));
        insert(new Message(Message.Level.DEBUG, "physical_guest", data));
        warn(kcontext, "Guest system {} has physical = true. Setting to false.", $guestId);
        modify($guest) {
            physical = false;
        }
end

rule "logMissingHost"
    agenda-group "InputValidation"
    when
        $guest : System($guestId : id, physical == false)
        not HostGuest(guestId == $guestId)
        not VirtualizationGroupMember(guestId == $guestId)
    then
        // input data says this guest is virtual machine but we do not know
        // about the system that hosts it nor the virtualization group that includes it
        // We treat this as a physical machine and warn the user, as the
        // matching will almost surely be incorrect
        TreeMap<String, String> data = new TreeMap<>();
        data.put("id", String.valueOf($guestId));
        insert(new Message(Message.Level.WARNING, "guest_with_unknown_host", data));
        warn(kcontext, "Guest system {} has no host information. Considering it as physical.", $guestId);
        modify($guest) {
            physical = true;
        }
end

rule "logMissingCpuCount"
    agenda-group "InputValidation"
    when
        $system : System($id : id, cpus == null)
    then
        TreeMap<String, String> data = new TreeMap<>();
        data.put("id", String.valueOf($id));
        insert(new Message(Message.Level.WARNING, "unknown_cpu_count", data));
        warn(kcontext, "Missing CPU count for system {}. Assuming 16 CPUs.", $id);
        modify($system) {
            cpus = 16;
        }
end
